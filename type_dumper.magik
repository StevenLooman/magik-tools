#% text_encoding = iso8859_1

_if _not sw_module_manager.module(:json).loaded?
_then
	sw_module_manager.load_module(:json)
_endif
$



# Auxilary methods.
method_finder.auto_start? << _true
$

_pragma(classify_level=restricted)
_private _method method_finder.read_comment()
	## Read a comment from input.
	## @return {sw:char16_vector|sw:unset} Read comment.
	## @return {sw:char16_vector|sw:unset} Method finder message.
	_local msg << .input.get_line()
	_local line_count << msg.as_integer()
	_if line_count _is _unset
	_then
		# Ignore errors.
		_return _unset, msg
	_endif

	_local comment_lines << rope.new_for(line_count)
	_over 1.upto(line_count)
	_loop
		_local comment_line << .input.get_line()
		comment_lines.add_last(comment_line)
	_endloop
	_return comment_lines.join_as_strings(character.newline), _unset
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_class_comment(class)
	## Get class comment.
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Class comment.
	_local command << write_string("get_class_info comments ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_method_comment(method, class)
	## Get method comment.
	## @param {sw:char16_vector} method Method name, e.g., "as_simple_vector()".
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Method comment.
	_local command << write_string("get_method_info comments ", method, " ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$



_pragma(classify_level=basic, topic=type_dumper)
## Type dumper.
## @slot {sw:set} ignore_vars
## @slot {sw:external_text_output_stream} out_stream
def_slotted_exemplar(:type_dumper,
	{
		{:ignore_vars, _unset},
		{:out_stream, _unset}
	})
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
type_dumper.define_shared_constant(
	:undefined_result,
	"__UNDEFINED_RESULT__",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
type_dumper.define_shared_constant(
	:self_type,
	"_self",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
type_dumper.define_shared_constant(
	:undefined_type,
	"_undefined",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:character}
type_dumper.define_shared_constant(
	:value_separator,
	%,,
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:character}
type_dumper.define_shared_constant(
	:value_combinator,
	%|,
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method type_dumper.new(filename, _optional ignore_vars)
	## Constructor.
	## @param {sw:char16_vector} filename filename to dump to
	## @param {sw:simple_vector} ignore_vars, types to ignore
	## @return {_clone}
	_return _clone.init(filename, ignore_vars)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.init(filename, _optional ignore_vars)
	## Initializer.
	## @param {sw:char16_vector} filename filename to dump to
	## @param {sw:simple_vector} ignore_vars, types to ignore
	## @return {_self}
	.ignore_vars << set.new_from(ignore_vars.default({}))
	.ignore_vars.add(:|user:| + _self.class_name)
	.out_stream << external_text_output_stream.new(filename)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.deinit()
	## Deinitialize self, closes output stream.
	.out_stream.close()
	.out_stream << _unset
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_line(_gather parts)
	## Write line.
	## @param {sw:char16_vector} parts Parts to write.
	.out_stream.write(_scatter parts)
	.out_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_instruction(instruction)
	## Write instruction.
	## @param {sw:property_list} instruction Instruction to write.
	_local encoder << sw:json_encoder.new()
	_local line << encoder.generate_string(instruction)
	.out_stream.write(line, character.newline)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method type_dumper.run()
	## Run the dump.
	_protect
		_self.int!run()
	_protection
		_self.deinit()
	_endprotect
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.int!run()
	## Run the actual dump.
	## Note that order of export is important when reading this file!
	_self.pre_process()

	# Write intro.
	_self.write_line("// Smallworld version: ", system.sw!version_string)
	_self.write_line("// self type: ", _self.self_type)
	_self.write_line("// undefined type: ", _self.undefined_type)
	_self.write_line("// undefined result: ", _self.undefined_result)

	_local sorted_pkgs << sorted_collection.new_from(package.all_packages, {:method_result, :name})

	# Write packages.
	_self.write_line("// packages")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_self.write_package(pkg)
	_endloop

	# Write types.
	_self.write_line("// types")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_types(pkg)
		_loop
			_local type_name << _self.name_from_type(pkg, key, method_table)
			_self.write_type(type_name, method_table)
		_endloop
	_endloop

	# Write globals.
	_self.write_line("// globals")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_type_globals(pkg)
		_loop
			_local type_name << _self.name_from_type(pkg, key, method_table)
			_self.write_global(type_name, method_table)
		_endloop
	_endloop

	# Write methods.
	_self.write_line("// methods")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_types(pkg)
		_loop
			_local type_name << _self.name_from_type(pkg, key, method_table)
			_self.write_type_methods(type_name, method_table)
		_endloop
	_endloop

	# Write procedures.
	_self.write_line("// procedures")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, var _over _self.pkg_procedures(pkg)
		_loop
			_self.write_procedure(var)
		_endloop
	_endloop

	# Write conditions.
	_self.write_line("// conditions")
	_for cond _over _self.sorted_conditions()
	_loop
		_self.write_condition(cond)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.pre_process()
	## Pre process:
	## - massage some exemplars for better type dumping.
	sw:auth!access.define_method_target.metadata[:exemplar_global] << @sw:auth!access
	sw:alternative_access.define_method_target.metadata[:exemplar_global] << @sw:alternative_access
	sw:random.define_method_target.metadata[:exemplar_global] << @sw:random
	sw:sw_regexp.define_method_target.metadata[:exemplar_global] << @sw:sw_regexp
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.name_from_type(pkg, key, method_table)
	## Get name from type.
	## @param {sw:package} pkg Package.
	## @param {sw:symbol} key Key in package.
	## @param {sw:method_table} method_table Method table.
	## @return {sw:symbol} Name from type.
	_return pkg.name + :|:| + key
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.name_from_object(obj)
	## Get type name from object.
	## @param {sw:object} obj Object.
	## @return {sw:symbol} Full type name.
	_local method_table << obj.define_method_target
	_local metadata << method_table.metadata
	_if _not metadata.includes_key?(:exemplar_global)
	_then
		_local msg << write_string("Could not determine type from object: ", obj.class_name)
		condition.raise(:warning, :string, msg)
		_return _self.undefined_result
	_endif
	_local global_var << metadata[:exemplar_global]
	_local pkg << global_var.package
	_return pkg.name + :|:| + global_var.key
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_package(pkg)
	## Write package.
	## @param {sw:package} pkg Package to write.
	_local instruction << sw:property_list.new_with(:instruction, "package")

	instruction[:name] << pkg.name

	_local mapper <<
		_proc@mapper(pkg_use)
			_return pkg_use.name
		_endproc
	instruction[:uses] << pkg.uses().map(mapper)

	_self.write_instruction(instruction)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_type(type_name, method_table)
	## Write type.
	## @param {sw:symbol} type_name Name of type to report.
	## @param {sw:method_table} method_table
	_local instruction << sw:property_list.new_with(:instruction, "type")

	instruction[:type_name] << type_name

	_local metadata << method_table.metadata
	instruction[:sort] << metadata[:instance_format]
	_if metadata[:exemplar] _is sw:object
	_then
		instruction[:sort] << "object"
	_endif

	instruction[:doc] << method_finder.get_class_comment(type_name).default("")

	# Inheritance.
	_local parents << sw:rope.new()
	_local behaviour_sources << metadata[:behaviour_sources].default(property_list)  # type: sw:property_list
	_local behaviour_sources_keys << behaviour_sources.keys.as_sorted_collection()
	_for source_name _over behaviour_sources_keys.fast_elements()
	_loop
		_local source_method_table << behaviour_sources[source_name]  # type: sw:method_table
		_local source_metadata << source_method_table.metadata
		_local source_global_var <<
			_if source_metadata[:exemplar_global] _isnt _unset
			_then
				>> source_metadata[:exemplar_global]
			_else
				>> write_string("@sw:", source_metadata[:exemplar_name]).evaluate()
			_endif
		_local source_type_name << _self.name_from_type(source_global_var.package, source_global_var.key, source_method_table)
		parents.add_last(source_type_name)
	_endloop
	instruction[:parents] << parents

	# Slots.
	instruction[:slots] << _self.build_slots(method_table)

	# Pragma.
	instruction[:pragma] << metadata[:topic].default({})

	# Module name.
	instruction[:module_name] <<
		_if metadata[:exemplar] _isnt _unset
		_then
			>> metadata[:exemplar].module_name
		_endif

	_self.write_instruction(instruction)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_global(type_name, method_table)
	## Write type global.
	## @param {sw:symbol} type_name Name of type to report.
	## @param {sw:method_table} method_table
	_local instruction << sw:property_list.new_with(:instruction, "global")

	instruction[:type_name] << type_name

	_local metadata << method_table.metadata
	_local global_var <<
		_if metadata[:exemplar_global] _isnt _unset
		_then
			>> metadata[:exemplar_global]
		_else
			>> write_string("@sw:", metadata[:exemplar_name]).evaluate()
		_endif
	instruction[:aliased_type_name] << _self.name_from_type(global_var.package, global_var.key, method_table)

	_self.write_instruction(instruction)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_type_methods(type_name, method_table)
	## Write type methods.
	## @param {sw:symbol} type_name Name of type to report.
	## @param {sw:method_table} method_table
	_local methods << rope.new_from_iter(method_table, :|local_methods()|)
	_local methods_sorted << methods.as_sorted_collection({:method_result, :name})
	_for method _over methods_sorted.fast_elements()
	_loop
		# No slot methods.
		_if method.name.matches?(:|$slot_*|)
		_then
			_continue
		_endif

		# No privates.
		_if method.private?
		_then
			_continue
		_endif

		_self.write_method(type_name, method)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_method(type_name, method)
	## Write method.
	## @param {sw:symbol} type_name Name of type to report.
	## @param {sw:method} method
	_local instruction << sw:property_list.new_with(:instruction, "method")

	instruction[:type_name] << type_name
	instruction[:method_name] << method.name

	_local modifiers << rope.new()
	_if method.abstract?
	_then
		modifiers.add_last("abstract")
	_endif
	_if method.private?
	_then
		modifiers.add_last("private")
	_endif
	_if method.iter?
	_then
		modifiers.add_last("iter")
	_endif
	instruction[:modifiers] << modifiers

	_local params << _self.build_params(method.name, method.value)
	_local is_assignment? << method.name.matches?(:|*<<|)
	_if is_assignment?
	_then
		instruction[:parameters] << params.subseq(2)
		instruction[:assignment_parameter] << params[1]
	_else
		instruction[:parameters] << params
	_endif


	instruction[:return_types] <<
		_if method.shared_constant?
		_then
			_local value << method.invokable.invoke()
			>> {_self.name_from_object(value)}
		_else
			>> _self.undefined_result
		_endif

	instruction[:loop_types] <<
		_if method.iter?
		_then
			>> _self.undefined_result
		_else
			>> {}
		_endif

	instruction[:source_file] <<
		_if _not method.slot_accessor?
		_then
			>> _try
				   >> method.source_file
			   _when error
				   # pass
			   _endtry
		_endif

	instruction[:doc] << method_finder.get_method_comment(method.name, type_name)

	_local type << method.owner.meta_at(:exemplar)
	instruction[:hash] <<
		_if _not method.slot_accessor? _andif
		    _not method.shared_constant? _andif
		    _not method.shared_variable?
		_then
			>> _try
				   >> sw!method_hash(type, method.name)
			   _when error
				   # pass
			   _endtry
		_endif

	instruction[:module_name] <<
		_try
			>> method.source_module.name
		_when error
			# pass
		_endtry

	instruction[:pragma] <<
		_try
			>> method.compiler_info[:topic]
		_when error
			>> {}
		_endtry

	instruction[:used_slots] << {}
	instruction[:used_globals] << {}
	instruction[:used_methods] << {}
	instruction[:used_conditions] << {}

	_self.write_instruction(instruction)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_procedure(var)
	## Write procedure.
	## @param {sw:global_variable} var
	_local instruction << sw:property_list.new_with(:instruction, "procedure")

	_local procedure << var.value
	instruction[:type_name] << var.package.name + :|:| + var.key
	instruction[:procedure_name] << procedure.name

	_local modifiers << rope.new()
	_if procedure.iter?
	_then
		modifiers.add_last("iter")
	_endif
	instruction[:modifiers] << modifiers

	instruction[:parameters] << _self.build_params(:procedure, procedure)

	instruction[:return_types] << _self.undefined_result

	instruction[:loop_types] <<
		_if procedure.iter?
		_then
			>> {_self.undefined_result}
		_else
			>> {}
		_endif

	instruction[:source_file] <<
		_try
			>> procedure.source_file
		_when error
			>> _unset
		_endtry

	instruction[:doc] <<
		_if var.package.name = "sw"
		_then
			>> method_finder.get_method_comment(var.key, "<global>").default("")
		_endif

	instruction[:module_name] << _unset

	instruction[:used_globals] << {}
	instruction[:used_methods] << {}
	instruction[:used_conditions] << {}

	_self.write_instruction(instruction)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_contents(pkg)
	## Get contents from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name in package.
	## @loop {sw:object} Object in package.
	_local sorted_keys << sorted_collection.new_from_iter(pkg, :fast_keys_and_elements|()|, _true)
	_for key _over sorted_keys.fast_elements()
	_loop
		_if key.matches?(:|_*|)
		_then
			_continue
		_endif

		_local var_name << pkg.name + :|:| + key
		_if .ignore_vars.includes?(var_name)
		_then
			_continue
		_endif

		_local element << pkg[key]  # type: sw:object
		_loopbody(key, element)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_types(pkg)
	## Get types from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name of type.
	## @loop {sw:method_table} Method table of type.
	_local seen_method_tables << set.new()
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip procedures.
		_if element.is_class_of?(sw:procedure) _andif
		    element _isnt sw:procedure
		_then
			_continue
		_endif

		# Ensure only types, no aliases.
		_local method_table << element.define_method_target
		_local metadata << method_table.metadata
		_local name <<
			_if metadata[:exemplar_name] _isnt _unset
			_then
				>> pkg.name + :|:| + metadata[:exemplar_name]
			_elif metadata[:exemplar_global] _isnt _unset
			_then
				>> metadata[:exemplar_global].package.name + :|:| + metadata[:exemplar_global].key
			_endif
		_if name _isnt pkg.name + :|:| + key
		_then
			_continue
		_endif

		# Ensure no duplicates.
		_if seen_method_tables.includes?(method_table)
		_then
			_continue
		_endif
		seen_method_tables.add(method_table)

		_loopbody(key, method_table)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_type_globals(pkg)
	## Get type globals from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name of global type.
	## @loop {sw:method_table} Method table of aliased type.
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip sw:object.
		_if element _is sw:object
		_then
			_continue
		_endif

		# Skip procedures.
		_if element.is_class_of?(sw:procedure) _andif
		    element _isnt sw:procedure
		_then
			_continue
		_endif

		# Ensure only aliases, no raw types.
		_local method_table << element.define_method_target
		_local metadata << method_table.metadata
		_if metadata[:exemplar_name] _is key
		_then
			_continue
		_endif

		_loopbody(key, method_table)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_procedures(pkg)
	## Get types from package.
	## @param {package} pkg Package.
	## @loop {sw:symbol} Key of procedure in package.
	## @loop {sw:procedure} Procedure itself.
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip non-procedures.
		_local var << pkg.global_at(key)
		_local value << var.value
		_if _not value.is_class_of?(sw:procedure) _orif
		    value _is sw:procedure
		_then
			_continue
		_endif

		_loopbody(key, var)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.build_slots(method_table)
	## Build slots to dump.
	## @param {sw:method_table} method_table
	## @return {sw:rope} Slots.
	_local slots << sw:rope.new()

	_local metadata << method_table.metadata
	_local instance_slot_data << metadata[:instance_slot_data].default({})
	_for slot_desc _over instance_slot_data.fast_elements()
	_loop
		_if slot_desc.owner _isnt method_table
		_then
			_continue
		_endif

		_local slot << sw:property_list.new()
		slot[:name] << slot_desc.slot_name
		slot[:type_name] << _self.undefined_type
		slots.add_last(slot)
	_endloop

	_return slots
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.build_params(name, procedure)
	## Build procedure-parameters to dump.
	## @param {sw:procedure} procedure
	## @return {sw:rope} Parameters.
	_local params << sw:rope.new()

	_if procedure.class_name _is :slot_access_procedure
	_then
		_if name.matches?(:|*<<|)
		_then
			_local param << sw:property_list.new_with(:name, "value", :modifier, "none", :type_name, _self.undefined_type)
			params.add_last(param)
			_return params
		_else
			_return params
		_endif
	_elif procedure.class_name _is :sys_slot_procedure
	_then
		_local param_val << sw:property_list.new_with(:name, "value", :modifier, "none", :type_name, _self.undefined_type)
		params.add_last(param_val)

		_local param_key << sw:property_list.new_with(:name, "key", :modifier, "none", :type_name, _self.undefined_type)
		params.add_last(param_key)

		_return params
	_endif

	_local param_list <<
		_if procedure.responds_to?(:basic_arglist)
		_then
			>> procedure.basic_arglist
		_else
			>> {}
		_endif
	_for index, param_name _over param_list.fast_keys_and_elements()
	_loop
		_local modifier <<
			_if procedure.gather_arg? _andif
			    index = param_list.size
			_then
				>> "gather"
			_elif index > procedure.num_mandatory_args
			_then
				>> "optional"
			_else
				>> "none"
			_endif
		_local param << sw:property_list.new_with(:name, param_name, :modifier, modifier, :type_name, _self.undefined_type)
		params.add_last(param)
	_endloop

	_return params
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.sorted_conditions()
	## Get all conditions, sorted.
	## @loop {sw:condition}
	_local templates << condition.sys!perform(:template_map)
	_local conditions << sorted_collection.new_from(templates.elements, {:method_result, :name})
	_for cond _over conditions.fast_elements()
	_loop
		_loopbody(cond)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_condition(cond)
	## Write condition.
	## @param {sw:condition} cond
	_local instruction << sw:property_list.new_with(:instruction, "condition")
	instruction[:name] << cond.name
	instruction[:data_names] << cond.data_name_list
	instruction[:parent] <<
		_if cond.taxonomy.size > 1
		_then
			>> cond.taxonomy[cond.taxonomy.size - 1]
		_endif
	instruction[:doc] << method_finder.get_method_comment(cond.name, "<condition>")
	_self.write_instruction(instruction)
_endmethod
$

type_dumper.new("/tmp/sw_types.jsonl").run()
$
