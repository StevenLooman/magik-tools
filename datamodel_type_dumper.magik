#% text_encoding = iso8859_1

_if _not sw_module_manager.module(:json).loaded?
_then
	sw_module_manager.load_module(:json)
_endif
$



# Auxilary methods.
method_finder.auto_start? << _true
$

_pragma(classify_level=restricted)
_private _method method_finder.read_comment()
	## Read a comment from input.
	## @return {sw:char16_vector|sw:unset} Read comment.
	## @return {sw:char16_vector|sw:unset} Method finder message.
	_local msg << .input.get_line()
	_local line_count << msg.as_integer()
	_if line_count _is _unset
	_then
		# Ignore errors.
		_return _unset, msg
	_endif

	_local comment_lines << rope.new_for(line_count)
	_over 1.upto(line_count)
	_loop
		_local comment_line << .input.get_line()
		comment_lines.add_last(comment_line)
	_endloop
	_return comment_lines.join_as_strings(character.newline), _unset
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_class_comment(class)
	## Get class comment.
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Class comment.
	_local command << write_string("get_class_info comments ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_method_comment(method, class)
	## Get method comment.
	## @param {sw:char16_vector} method Method name, e.g., "as_simple_vector()".
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Method comment.
	_local command << write_string("get_method_info comments ", method, " ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$



_pragma(classify_level=basic, topic=type_dumper)
## Datamodel type dumper.
## @slot {sw:ds_version_view} view
## @slot {sw:external_text_output_stream} out_stream
def_slotted_exemplar(
	:datamodel_type_dumper,
	{
		{:view, _unset},
		{:out_stream, _unset}
	})
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
datamodel_type_dumper.define_shared_constant(
	:undefined_result,
	"__UNDEFINED_RESULT__",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
datamodel_type_dumper.define_shared_constant(
	:self_type,
	"_self",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:char16_vector}
datamodel_type_dumper.define_shared_constant(
	:undefined_type,
	"_undefined",
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:character}
datamodel_type_dumper.define_shared_constant(
	:value_separator,
	%,,
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:character}
datamodel_type_dumper.define_shared_constant(
	:value_combinator,
	%|,
	:private)
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method datamodel_type_dumper.new(view, filename)
	## Constructor.
	## @param {sw:ds_version_view} view
	## @param {sw:char16_vector} filename filename to dump to
	## @return {_clone}
	_return _clone.init(view, filename)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.init(view, filename)
	## Initializer.
	## @param {sw:ds_version_view} view
	## @param {sw:char16_vector} filename filename to dump to
	## @return {_self}
	.view << view
	.out_stream << external_text_output_stream.new(filename)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.deinit()
	## Deinitialize self, closes output stream.
	.out_stream.close()
	.out_stream << _unset
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.write_line(_gather parts)
	## Write line.
	## @param {sw:char16_vector} parts Parts to write.
	.out_stream.write(_scatter parts)
	.out_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.write_instruction(instruction)
	## Write instruction.
	## @param {sw:property_list} instruction Instruction to write.
	_local encoder << sw:json_encoder.new()
	_local line << encoder.generate_string(instruction)
	.out_stream.write(line, character.newline)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method datamodel_type_dumper.run()
	## Run the dump.
	_protect
		_self.int!run()
	_protection
		_self.deinit()
	_endprotect
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.int!run()
	## Run the actual dump.
	## Note that order of export is important when reading this file!
	# Write intro.
	_self.write_line("// Smallworld version: ", system.sw!version_string)
	_self.write_line("// self type: ", _self.self_type)
	_self.write_line("// undefined type: ", _self.undefined_type)
	_self.write_line("// undefined result: ", _self.undefined_result)
	_self.write_line("// view: ", .view.original_dataset_name)

	_local colls << rope.new_from_iter(.view, :user_tables|()|)
	_local sorted_colls << sorted_collection.new_from(colls, {:method_result, :name})

	# Write record exemplars.
	_self.write_line("// record exemplars")
	_for coll _over sorted_colls.fast_elements()
	_loop
		_local (ignore?, ignore_reason) << _self.ignore_collection?(coll)
		_if ignore?
		_then
			condition.raise(:warning, :string, ignore_reason)
			_continue
		_endif

		_self.write_record_exemplar(coll)
	_endloop

	# Write fields.
	_self.write_line("// fields")
	_for coll _over sorted_colls.fast_elements()
	_loop
		_self.write_collection_fields(coll)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.name_from_type(pkg, key, method_table)
	## Get name from type.
	## @param {sw:package} pkg Package.
	## @param {sw:symbol} key Key in package.
	## @param {sw:method_table} method_table Method table.
	## @return {sw:symbol} Name from type.
	_return pkg.name + :|:| + key
_endmethod
$

#_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
#_method datamodel_type_dumper.write_record_exemplar(coll)
#	## Write record exemplar/type.
#	## @param {sw:ds_collection} coll
#	_local instruction << sw:property_list.new_with(:instruction, "type")
#
#	_local rec_ex << coll.record_exemplar
#	_local rec_ex_method_table << rec_ex.define_method_target
#	_local rec_ex_metadata << rec_ex_method_table.metadata
#	_local method_table << _self.get_exemplar_method_table_for_collection(coll)
#
#	_local globl << method_table.meta_at(:exemplar_global)
#	_local pkg << globl.package
#	_local key << globl.key
#	_local type_name << _self.name_from_type(pkg, key, _method_table)
#	instruction[:type_name] << type_name
#	instruction[:type_format] << _method_table.meta_at(:instance_format)
#
#	instruction[:doc] << method_finder.get_class_comment(type_name).default("")
#
#	# Inheritance.
#	_local parents << sw:rope.new()
#	_local behaviour_sources << metadata[:behaviour_sources].default(property_list)  # type: sw:property_list
#	_local behaviour_sources_keys << behaviour_sources.keys.as_sorted_collection()
#	_for source_name _over behaviour_sources_keys.fast_elements()
#	_loop
#		_local source_method_table << behaviour_sources[source_name]  # type: sw:method_table
#		_local source_metadata << source_method_table.metadata
#		_local source_global_var <<
#			_if source_metadata[:exemplar_global] _isnt _unset
#			_then
#				>> source_metadata[:exemplar_global]
#			_else
#				>> write_string("@sw:", source_metadata[:exemplar_name]).evaluate()
#			_endif
#		_local source_type_name << _self.name_from_type(source_global_var.package, source_global_var.key, source_method_table)
#		parents.add_last(source_type_name)
#	_endloop
#	instruction[:parents] << parents
#
#	# Slots.
#	instruction[:slots] << _self.build_slots(method_table)
#
#	# Generics.
#	instruction[:generics] << sw:rope.new()
#
#	_self.write_instruction(instruction)
#_endmethod
#$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_method datamodel_type_dumper.write_record_exemplar(coll)
	## Write record exemplar/type.
	## Does nothing for now.
	## @param {sw:ds_collection} coll
	_return
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.get_exemplar_method_table_for_collection(coll)
	## Get exemplar (parent of record exemplar) for collection.
	## @param {sw:ds_collection} coll
	## @return {sw:method_table}
	_local rec_ex << coll.record_exemplar
	_local method_table << rec_ex.define_method_target
	_return method_table.meta_at(:behaviour_sources).an_element()
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.get_type_name_for_collection(coll)
	## Get type_name for collection.
	## @param {sw:ds_collection} coll
	## @return {sw:symbol}
	_local method_table << _self.get_exemplar_method_table_for_collection(coll)
	_local globl << method_table.meta_at(:exemplar_global)
	_local pkg << globl.package
	_local key << globl.key
	_return _self.name_from_type(pkg, key, method_table)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.write_collection_fields(coll)
	## Write collection fields.
	## @param {sw:ds_collection} coll
	_local type_name << _self.get_type_name_for_collection(coll)
	_local sorted_fields << sorted_collection.new_from(coll.all_fields, {:method_result, :name})
	_for field _over sorted_fields.fast_elements()
	_loop
		_if _self.ignore_field?(coll)
		_then
			_continue
		_endif

		_self.write_collection_field(type_name, field)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.ignore_collection?(collection)
	## Ignore this collection?
	## @param {sw:ds_collection} collection
	## @return {sw:false} Ignore?
	## @return {sw:char16_vector} Ignore reason
	_local rec_ex << collection.record_exemplar
	_if rec_ex.class_name _is :ds_record _orif
	    rec_ex.class_name _is :rwo_record _orif
	    rec_ex.class_name _is :dataless_rwo_record
	_then
		_return _true, "No record exemplar"
	_endif

	_return _false, ""
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.ignore_field?(field)
	## Ignore this collection?
	## @param {sw:ds_field} collection
	## @return {sw:false} Ignore?
	## @return {sw:char16_vector} Ignore reason
	_local rec_ex << field.owner.record_exemplar
	_if rec_ex.class_name _is :ds_record _orif
	    rec_ex.class_name _is :rwo_record _orif
	    rec_ex.class_name _is :dataless_rwo_record
	_then
		_return _true, "No record exemplar"
	_endif

	_return _false, ""
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.field_type_name(field)
	## Get the type name of a field.
	## @param {sw:ds_field} field
	## @return {sw:simple_vector<sw:char16_vector>|sw:char16_vector}
	_local type_name << _self.undefined_type
	_if field.is_physical?
	_then
		_local type << field.type.class.class_name
		type_name << "sw:" + type
	_elif field.is_join?
	_then
		_if field.join_type _is :db_set_join
		_then
			_local result_type_names << _self.join_result_type_names(field)
			_return "sw:db_set<" + result_type_names + ">"
		_elif field.join_type _is :db_rope_join
		_then
			_local result_type_names << _self.join_result_type_names(field)
			_return "sw:db_rope<" + result_type_names + ">"
		_elif field.join_type _is :follow
		_then
			_local result_type_names << _self.join_result_type_names(field)
			type_name << result_type_names
		_elif field.join_type _is :text
		_then
			type_name << "sw:char16_vector"
		_else
			condition.raise(:not_implemented)
		_endif
	_elif field.is_geometry?
	_then
		_local geom_ex << field.geom_exemplar
		type_name << "sw:" + geom_ex.class_name
	_elif field.is_derived?
	_then
		_local type << field.type.class.class_name
		type_name << "sw:" + type
	_else
		condition.raise(:not_implemented)
	_endif

	_if type_name = _self.undefined_result
	_then
		_return type_name
	_endif

	_if _not field.mandatory?
	_then
		type_name << type_name + "|sw:unset"
	_endif

	_return type_name
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.join_result_type_names(join_field)
	## Get the type names of the `result_tables from the `join_field`.
	## @param {sw:ds_join_field} join_field
	## @return {sw:char16_vector}
	_local result_type_names << sorted_collection.new()
	_for result_table _over join_field.result_tables.fast_elements()
	_loop
		_local result_type_name << _self.get_type_name_for_collection(result_table)
		result_type_names.add(result_type_name)
	_endloop
	_return result_type_names.join_as_strings(_self.value_combinator)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method datamodel_type_dumper.write_collection_field(type_name, field)
	## Write collection field.
	## @param {sw:symbol} type_name
	## @param {sw:ds_field} field
	_local instruction << sw:property_list.new_with(:instruction, "method")

	instruction[:type_name] << type_name
	instruction[:method_name] << field.name
	instruction[:modifiers] << {}
	instruction[:parameters] << {}
	instruction[:return_types] << _self.field_type_name(field)
	instruction[:loop_types] << {}
	instruction[:source_file] << _unset
	instruction[:doc] << field.external_name
	instruction[:module_name] << _unset
	instruction[:pragma] << _unset
	instruction[:hash] << _unset
	instruction[:used_slots] << {}
	instruction[:used_globals] << {}
	instruction[:used_methods] << {}
	instruction[:used_conditions] << {}

	_self.write_instruction(instruction)
_endmethod
$
