#% text_encoding = iso8859_1
##
## Script to dump types from the current sesssion, to a type database (.jsonl file). This type database
## can be read into the magik-language-server so that it has all the type/method/... definitions.
## These definitions are used for (auto) completion, checks, etc in the magik-language-server.
##
## Usage:
## - Start a Smallworld session, for example a swaf session
## - Update the target path at the bottom of this script
## - Run this script
## - Copy the type database (.jsonl file) to a location of your choosing (e.g., the workspace)
## - Add the location of the type database to the magik-language-server config
## - Restart the magik-language-server
##

_package mt

_pragma(classify_level=basic, topic=type_dumper)
## Type dumper.
## @slot {sw:set} ignore_vars
## @slot {sw:external_text_output_stream} out_stream
def_slotted_exemplar(
	:type_dumper,
	{
		{:ignore_vars, _unset},
		{:out_stream, _unset}
	})
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method type_dumper.new(filename, _optional ignore_vars)
	## Constructor.
	## @param {sw:char16_vector} filename filename to dump to
	## @param {sw:simple_vector} ignore_vars, types to ignore
	## @return {_clone}
	_return _clone.init(filename, ignore_vars)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.init(filename, _optional ignore_vars)
	## Initializer.
	## @param {sw:char16_vector} filename filename to dump to
	## @param {sw:simple_vector} ignore_vars, types to ignore
	## @return {_self}
	.ignore_vars << set.new_from(ignore_vars.default({}))
	.ignore_vars.add(:|user:| + _self.class_name)
	.out_stream << external_text_output_stream.new(filename)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.deinit()
	## Deinitialize self, closes output stream.
	.out_stream.close()
	.out_stream << _unset
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_line(_gather parts)
	## Write line.
	## @param {sw:char16_vector} parts Parts to write.
	.out_stream.write(_scatter parts)
	.out_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_definition(definition)
	## Write definition.
	## @param {mt:definition} definition Definition to write.
	_local line << definition.generate_json_string()
	_self.write_line(line)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
_method type_dumper.run()
	## Run the dump.
	_protect
		_self.int!run()
	_protection
		_self.deinit()
	_endprotect
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.int!run()
	## Run the actual dump.
	## Note that order of export is important when reading this file!
	_self.pre_process()

	# Write intro.
	_self.write_line("// Smallworld version: ", system.sw!version_string)
	_self.write_line("// Smallworld session: ", smallworld_product.magik_session().properties[:name])
	_self.write_line("// self type: ", mt:definition.self_type)
	_self.write_line("// undefined type: ", mt:definition.undefined_type)
	_self.write_line("// undefined result: ", mt:definition.undefined_result)

	# Write products.
	_self.write_line("// products")
	_local sorted_products << sorted_collection.new_from(smallworld_product.products, {:method_result, :name})
	_for product _over sorted_products.fast_elements()
	_loop
		_local def << product_definition.new_from(product)
		_self.write_definition(def)
	_endloop

	# Write modules.
	_self.write_line("// modules")
	_local sorted_modules << sorted_collection.new_from(sw_module_manager.defined_modules, {:method_result, :name})
	_for module _over sorted_modules.fast_elements()
	_loop
		_local def << module_definition.new_from(module)
		_self.write_definition(def)
	_endloop

	# Write packages.
	_self.write_line("// packages")
	_local sorted_pkgs << sorted_collection.new_from(package.all_packages, {:method_result, :name})
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_local def << package_definition.new_from(pkg)
		_self.write_definition(def)
	_endloop

	# Write types.
	_self.write_line("// types")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_types(pkg)
		_loop
			_local def << type_definition.new_from(pkg, key, method_table)
			_self.write_definition(def)
		_endloop
	_endloop

	# Write globals.
	_self.write_line("// globals")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_type_globals(pkg)
		_loop
			_local def << global_definition.new_from(pkg, key, method_table)
			_self.write_definition(def)
		_endloop
	_endloop

	# Write methods.
	_self.write_line("// methods")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, method_table _over _self.pkg_types(pkg)
		_loop
			_self.write_type_methods(pkg, key, method_table)
		_endloop
	_endloop

	# Write procedures.
	_self.write_line("// procedures")
	_for pkg _over sorted_pkgs.fast_elements()
	_loop
		_for key, var _over _self.pkg_procedures(pkg)
		_loop
			_local def << procedure_definition.new_from(var)
			_self.write_definition(def)
		_endloop
	_endloop

	# Write conditions.
	_self.write_line("// conditions")
	_for cond _over _self.sorted_conditions()
	_loop
		_local def << condition_definition.new_from(cond)
		_self.write_definition(def)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.pre_process()
	## Pre process:
	## - massage some exemplars for better type dumping.
	_if sw:auth!access.define_method_target.metadata[:exemplar_global] _is _unset
	_then
		sw:auth!access.define_method_target.metadata[:exemplar_global] << @sw:auth!access
	_endif

	_if sw:alternative_access.define_method_target.metadata[:exemplar_global] _is _unset
	_then
		sw:alternative_access.define_method_target.metadata[:exemplar_global] << @sw:alternative_access
	_endif

	_if sw:random.define_method_target.metadata[:exemplar_global] _is _unset
	_then
		sw:random.define_method_target.metadata[:exemplar_global] << @sw:random
	_endif

	_if sw:sw_regexp.define_method_target.metadata[:exemplar_global] _is _unset
	_then
		sw:sw_regexp.define_method_target.metadata[:exemplar_global] << @sw:sw_regexp
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _method type_dumper.write_type_methods(pkg, name, method_table)
	## Write type methods.
	## @param {sw:package} pkg
	## @param {sw:symbol} name
	## @param {sw:method_table} method_table
	_local methods << rope.new_from_iter(method_table, :|local_methods()|)
	_local methods_sorted << methods.as_sorted_collection({:method_result, :name})
	_for method _over methods_sorted.fast_elements()
	_loop
		# No slot methods.
		_if method.name.matches?(:|$slot_*|)
		_then
			_continue
		_endif

		# No privates.
		_if method.private?
		_then
			_continue
		_endif

		_local definition << method_definition.new_from(pkg, name, method)
		_self.write_definition(definition)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_contents(pkg)
	## Get contents from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name in package.
	## @loop {sw:object} Object in package.
	_local sorted_keys << sorted_collection.new_from_iter(pkg, :fast_keys_and_elements|()|, _true)
	_for key _over sorted_keys.fast_elements()
	_loop
		_if key.matches?(:|_*|)
		_then
			_continue
		_endif

		_local var_name << pkg.name + :|:| + key
		_if .ignore_vars.includes?(var_name)
		_then
			_continue
		_endif

		_local element << pkg[key]  # type: sw:object
		_loopbody(key, element)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_types(pkg)
	## Get types from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name of type.
	## @loop {sw:method_table} Method table of type.
	_local seen_method_tables << set.new()
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip procedures.
		_if element.is_class_of?(sw:procedure) _andif
		    element _isnt sw:procedure
		_then
			_continue
		_endif

		# Ensure only types, no aliases.
		_local method_table << element.define_method_target
		_local metadata << method_table.metadata
		_local name <<
			_if metadata[:exemplar_name] _isnt _unset
			_then
				>> pkg.name + :|:| + metadata[:exemplar_name]
			_elif metadata[:exemplar_global] _isnt _unset
			_then
				>> metadata[:exemplar_global].package.name + :|:| + metadata[:exemplar_global].key
			_endif
		_if name _isnt pkg.name + :|:| + key
		_then
			_continue
		_endif

		# Ensure no duplicates.
		_if seen_method_tables.includes?(method_table)
		_then
			_continue
		_endif
		seen_method_tables.add(method_table)

		_loopbody(key, method_table)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_type_globals(pkg)
	## Get type globals from package.
	## @param {sw:package} pkg Package.
	## @loop {sw:symbol} Name of global type.
	## @loop {sw:method_table} Method table of aliased type.
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip sw:object.
		_if element _is sw:object
		_then
			_continue
		_endif

		# Skip procedures.
		_if element.is_class_of?(sw:procedure) _andif
		    element _isnt sw:procedure
		_then
			_continue
		_endif

		# Ensure only aliases, no raw types.
		_local method_table << element.define_method_target
		_local metadata << method_table.metadata
		_if metadata[:exemplar_name] _is key
		_then
			_continue
		_endif

		_loopbody(key, method_table)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.pkg_procedures(pkg)
	## Get types from package.
	## @param {package} pkg Package.
	## @loop {sw:symbol} Key of procedure in package.
	## @loop {sw:procedure} Procedure itself.
	_for key, element _over _self.pkg_contents(pkg)
	_loop
		# Skip non-procedures.
		_local var << pkg.global_at(key)
		_local value << var.value
		_if _not value.is_class_of?(sw:procedure) _orif
		    value _is sw:procedure
		_then
			_continue
		_endif

		_loopbody(key, var)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic=type_dumper, usage=internal)
_private _iter _method type_dumper.sorted_conditions()
	## Get all conditions, sorted.
	## @loop {sw:condition}
	_local templates << condition.sys!perform(:template_map)
	_local conditions << sorted_collection.new_from(templates.elements, {:method_result, :name})
	_for cond _over conditions.fast_elements()
	_loop
		_loopbody(cond)
	_endloop
_endmethod
$
