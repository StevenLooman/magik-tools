#% text_encoding = iso8859_1

_pragma(classify_level=restricted)
_private _method method_finder.read_comment()
	## Read a comment from input.
	## @return {sw:char16_vector|sw:unset} Read comment, unset on error.
	## @return {sw:char16_vector|sw:unset} Method finder error, if any.
	_local msg << .input.get_line()
	_local line_count << msg.as_integer()
	_if line_count _is _unset
	_then
		# Ignore errors.
		_return _unset, msg
	_endif

	_local comment_lines << rope.new_for(line_count)
	_over 1.upto(line_count)
	_loop
		_local comment_line << .input.get_line()
		comment_lines.add_last(comment_line)
	_endloop
	_return comment_lines.join_as_strings(character.newline), _unset
_endmethod
$

_pragma(classify_level=restricted)
_private _method method_finder.read_line()
	## Read a single line from input.
	## @return {sw:char16_vector|sw:unset} Read line.
	_return .input.get_line()
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_class_comment(class)
	## Get class comment.
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Class comment, unset on error.
	## @return {sw:char16_vector|sw:unset} Method finder error, if any.
	_local command << write_string("get_class_info comments ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_class_topics(class)
	## Get class comment.
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:simple_vector} Class topics.
	_local command << write_string("get_class_info topics ", class)
	_self.write(command, character.newline)
	_self.flush()
	_local topics << _self.read_line()
	_if topics = "method finder: Invalid class"
	_then
		_return {}
	_endif

	_return topics.default("").trim_spaces().split_by(character.space)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_method_comment(method, class)
	## Get method comment.
	## @param {sw:char16_vector} method Method name, e.g., "as_simple_vector()".
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:char16_vector|sw:unset} Method comment, unset on error.
	## @return {sw:char16_vector|sw:unset} Method finder error, if any.
	_local command << write_string("get_method_info comments ", method, " ", class)
	_self.write(command, character.newline)
	_self.flush()
	_return _self.read_comment()
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method method_finder.get_method_topics(method, class)
	## Get method comment.
	## @param {sw:char16_vector} method Method name, e.g., "as_simple_vector()".
	## @param {sw:char16_vector} class Class name, e.g., "sw:rope".
	## @return {sw:simple_vector} Method topics.
	_local command << write_string("get_method_info topics ", method, " ", class)
	_self.write(command, character.newline)
	_self.flush()
	_local topics << _self.read_line()
	_if topics = "method finder: Invalid class" _orif
	    topics = "method finder: Invalid method" _orif
	    topics = "method finder: No such method found"
	_then
		_return {}
	_endif

	_return topics.default("").trim_spaces().split_by(character.space)
_endmethod
$

method_finder.auto_start? << _true
$
