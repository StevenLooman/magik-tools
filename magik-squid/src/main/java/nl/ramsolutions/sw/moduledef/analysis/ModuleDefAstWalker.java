package nl.ramsolutions.sw.moduledef.analysis;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.Token;
import com.sonar.sslr.api.Trivia;
import nl.ramsolutions.sw.moduledef.api.SwModuleDefinitionGrammar;

/**
 * A {@link AstNode} tree walker with pre- and post-methods to iterate a parse tree. Note that this
 * is generated by the {@code generate_ast_walker.py} script, do not edit this file manually!
 */
public abstract class ModuleDefAstWalker {

  /** Walk children of node. */
  protected void walkChildren(final AstNode node) {
    for (final AstNode childNode : node.getChildren()) {
      this.walkAst(childNode);
    }
  }

  /** Walk trivia and tokens of node. */
  protected void walkTokens(final AstNode tokenNode) {
    // Assume there can be only one token.
    final Token token = tokenNode.getToken();
    token.getTrivia().forEach(this::walkTrivia);
    this.walkToken(token);
  }

  /**
   * Start walking the node. The pre- and post-methods are called upon tree traversal.
   *
   * @param node Node to start walking.
   */
  @SuppressWarnings({"java:S1479", "checkstyle:MethodLength"})
  public void walkAst(final AstNode node) {
    final AstNodeType nodeType = node.getType();
    if (!(nodeType instanceof SwModuleDefinitionGrammar)) {
      this.walkTokens(node);
      return;
    }

    final SwModuleDefinitionGrammar value = (SwModuleDefinitionGrammar) nodeType;
    switch (value) {
      case MODULE_DEFINITION:
        this.walkPreModuleDefinition(node);
        this.walkChildren(node);
        this.walkPostModuleDefinition(node);
        break;

      case MODULE_IDENTIFICATION:
        this.walkPreModuleIdentification(node);
        this.walkChildren(node);
        this.walkPostModuleIdentification(node);
        break;

      case MODULE_NAME:
        this.walkPreModuleName(node);
        this.walkChildren(node);
        this.walkPostModuleName(node);
        break;

      case VERSION:
        this.walkPreVersion(node);
        this.walkChildren(node);
        this.walkPostVersion(node);
        break;

      case CONDITION_MESSAGE_ACCESSOR:
        this.walkPreConditionMessageAccessor(node);
        this.walkChildren(node);
        this.walkPostConditionMessageAccessor(node);
        break;

      case DESCRIPTION:
        this.walkPreDescription(node);
        this.walkChildren(node);
        this.walkPostDescription(node);
        break;

      case DO_NOT_TRANSLATE:
        this.walkPreDoNotTranslate(node);
        this.walkChildren(node);
        this.walkPostDoNotTranslate(node);
        break;

      case HIDDEN:
        this.walkPreHidden(node);
        this.walkChildren(node);
        this.walkPostHidden(node);
        break;

      case LANGUAGE:
        this.walkPreLanguage(node);
        this.walkChildren(node);
        this.walkPostLanguage(node);
        break;

      case MESSAGES:
        this.walkPreMessages(node);
        this.walkChildren(node);
        this.walkPostMessages(node);
        break;

      case OPTIONAL:
        this.walkPreOptional(node);
        this.walkChildren(node);
        this.walkPostOptional(node);
        break;

      case REQUIRED_BY:
        this.walkPreRequiredBy(node);
        this.walkChildren(node);
        this.walkPostRequiredBy(node);
        break;

      case REQUIRES:
        this.walkPreRequires(node);
        this.walkChildren(node);
        this.walkPostRequires(node);
        break;

      case REQUIRES_DATAMODEL:
        this.walkPreRequiresDatamodel(node);
        this.walkChildren(node);
        this.walkPostRequiresDatamodel(node);
        break;

      case REQUIRES_JAVA:
        this.walkPreRequiresJava(node);
        this.walkChildren(node);
        this.walkPostRequiresJava(node);
        break;

      case TEMPLATES:
        this.walkPreTemplates(node);
        this.walkChildren(node);
        this.walkPostTemplates(node);
        break;

      case TEST:
        this.walkPreTest(node);
        this.walkChildren(node);
        this.walkPostTest(node);
        break;

      case TESTS_MODULES:
        this.walkPreTestsModules(node);
        this.walkChildren(node);
        this.walkPostTestsModules(node);
        break;

      case INSTALL_REQUIRES:
        this.walkPreInstallRequires(node);
        this.walkChildren(node);
        this.walkPostInstallRequires(node);
        break;

      case ACE_INSTALLATION:
        this.walkPreAceInstallation(node);
        this.walkChildren(node);
        this.walkPostAceInstallation(node);
        break;

      case AUTH_INSTALLATION:
        this.walkPreAuthInstallation(node);
        this.walkChildren(node);
        this.walkPostAuthInstallation(node);
        break;

      case CASE_INSTALLATION:
        this.walkPreCaseInstallation(node);
        this.walkChildren(node);
        this.walkPostCaseInstallation(node);
        break;

      case STYLE_INSTALLATION:
        this.walkPreStyleInstallation(node);
        this.walkChildren(node);
        this.walkPostStyleInstallation(node);
        break;

      case SYSTEM_INSTALLATION:
        this.walkPreSystemInstallation(node);
        this.walkChildren(node);
        this.walkPostSystemInstallation(node);
        break;

      case MODULE_REFS:
        this.walkPreModuleRefs(node);
        this.walkChildren(node);
        this.walkPostModuleRefs(node);
        break;

      case MODULE_REF:
        this.walkPreModuleRef(node);
        this.walkChildren(node);
        this.walkPostModuleRef(node);
        break;

      case JAVA_MODULE_REFS:
        this.walkPreJavaModuleRefs(node);
        this.walkChildren(node);
        this.walkPostJavaModuleRefs(node);
        break;

      case JAVA_MODULE_REF:
        this.walkPreJavaModuleRef(node);
        this.walkChildren(node);
        this.walkPostJavaModuleRef(node);
        break;

      case REQUIRES_DATAMODEL_ENTRIES:
        this.walkPreRequiresDatamodelEntries(node);
        this.walkChildren(node);
        this.walkPostRequiresDatamodelEntries(node);
        break;

      case REQUIRES_DATAMODEL_ENTRY:
        this.walkPreRequiresDatamodelEntry(node);
        this.walkChildren(node);
        this.walkPostRequiresDatamodelEntry(node);
        break;

      case TEST_ENTRIES:
        this.walkPreTestEntries(node);
        this.walkChildren(node);
        this.walkPostTestEntries(node);
        break;

      case TEST_ENTRY:
        this.walkPreTestEntry(node);
        this.walkChildren(node);
        this.walkPostTestEntry(node);
        break;

      case FREE_LINES:
        this.walkPreFreeLines(node);
        this.walkChildren(node);
        this.walkPostFreeLines(node);
        break;

      case FREE_LINE:
        this.walkPreFreeLine(node);
        this.walkChildren(node);
        this.walkPostFreeLine(node);
        break;

      case NEWLINE:
        this.walkPreNewline(node);
        this.walkChildren(node);
        this.walkPostNewline(node);
        break;

      case COMMENT:
        this.walkPreComment(node);
        this.walkChildren(node);
        this.walkPostComment(node);
        break;

      case IDENTIFIER:
        this.walkPreIdentifier(node);
        this.walkChildren(node);
        this.walkPostIdentifier(node);
        break;

      case NUMBER:
        this.walkPreNumber(node);
        this.walkChildren(node);
        this.walkPostNumber(node);
        break;

      case REST_OF_LINE:
        this.walkPreRestOfLine(node);
        this.walkChildren(node);
        this.walkPostRestOfLine(node);
        break;

      case VERSION_NUMBER:
        this.walkPreVersionNumber(node);
        this.walkChildren(node);
        this.walkPostVersionNumber(node);
        break;

      case IDENTIFIERS:
        this.walkPreIdentifiers(node);
        this.walkChildren(node);
        this.walkPostIdentifiers(node);
        break;

      case IDENTIFIER_LIST:
        this.walkPreIdentifierList(node);
        this.walkChildren(node);
        this.walkPostIdentifierList(node);
        break;

      default:
        this.walkPreDefault(node);
        this.walkChildren(node);
        this.walkPostDefault(node);
        break;
    }
  }

  protected void walkPreModuleDefinition(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostModuleDefinition(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreModuleIdentification(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostModuleIdentification(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreModuleName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostModuleName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVersion(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVersion(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreConditionMessageAccessor(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostConditionMessageAccessor(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDescription(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostDescription(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDoNotTranslate(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostDoNotTranslate(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreHidden(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostHidden(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLanguage(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLanguage(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMessages(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMessages(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreOptional(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostOptional(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequiredBy(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequiredBy(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequires(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequires(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequiresDatamodel(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequiresDatamodel(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequiresJava(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequiresJava(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTemplates(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTemplates(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTest(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTest(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTestsModules(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTestsModules(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreInstallRequires(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostInstallRequires(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAceInstallation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAceInstallation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAuthInstallation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAuthInstallation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreCaseInstallation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostCaseInstallation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreStyleInstallation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostStyleInstallation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSystemInstallation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSystemInstallation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreModuleRefs(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostModuleRefs(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreModuleRef(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostModuleRef(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreJavaModuleRefs(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostJavaModuleRefs(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreJavaModuleRef(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostJavaModuleRef(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequiresDatamodelEntries(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequiresDatamodelEntries(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequiresDatamodelEntry(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequiresDatamodelEntry(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTestEntries(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTestEntries(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTestEntry(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTestEntry(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFreeLines(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFreeLines(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFreeLine(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFreeLine(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNewline(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNewline(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreComment(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostComment(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNumber(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNumber(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRestOfLine(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRestOfLine(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVersionNumber(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVersionNumber(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifiers(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifiers(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifierList(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifierList(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDefault(final AstNode node) {
    // pass
  }

  protected void walkPostDefault(final AstNode node) {
    // pass
  }

  protected void walkToken(final Token token) {
    // pass
  }

  protected void walkTrivia(final Trivia trivia) {
    // pass
  }
}
