package nl.ramsolutions.sw.productdef.analysis;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.Token;
import com.sonar.sslr.api.Trivia;
import nl.ramsolutions.sw.productdef.api.SwProductDefinitionGrammar;

/**
 * A {@link AstNode} tree walker with pre- and post-methods to iterate a parse tree. Note that this
 * is generated by the {@code generate_ast_walker.py} script, do not edit this file manually!
 */
public abstract class ProductDefAstWalker {

  /** Walk children of node. */
  protected void walkChildren(final AstNode node) {
    for (final AstNode childNode : node.getChildren()) {
      this.walkAst(childNode);
    }
  }

  /** Walk trivia and tokens of node. */
  protected void walkTokens(final AstNode tokenNode) {
    // Assume there can be only one token.
    final Token token = tokenNode.getToken();
    token.getTrivia().forEach(this::walkTrivia);
    this.walkToken(token);
  }

  /**
   * Start walking the node. The pre- and post-methods are called upon tree traversal.
   *
   * @param node Node to start walking.
   */
  @SuppressWarnings({"java:S1479", "checkstyle:MethodLength"})
  public void walkAst(final AstNode node) {
    final AstNodeType nodeType = node.getType();
    if (!(nodeType instanceof SwProductDefinitionGrammar)) {
      this.walkTokens(node);
      return;
    }

    final SwProductDefinitionGrammar value = (SwProductDefinitionGrammar) nodeType;
    switch (value) {
      case PRODUCT_DEFINITION:
        this.walkPreProductDefinition(node);
        this.walkChildren(node);
        this.walkPostProductDefinition(node);
        break;

      case PRODUCT_IDENTIFICATION:
        this.walkPreProductIdentification(node);
        this.walkChildren(node);
        this.walkPostProductIdentification(node);
        break;

      case PRODUCT_NAME:
        this.walkPreProductName(node);
        this.walkChildren(node);
        this.walkPostProductName(node);
        break;

      case PRODUCT_TYPE:
        this.walkPreProductType(node);
        this.walkChildren(node);
        this.walkPostProductType(node);
        break;

      case DESCRIPTION:
        this.walkPreDescription(node);
        this.walkChildren(node);
        this.walkPostDescription(node);
        break;

      case DO_NOT_TRANSLATE:
        this.walkPreDoNotTranslate(node);
        this.walkChildren(node);
        this.walkPostDoNotTranslate(node);
        break;

      case REQUIRES:
        this.walkPreRequires(node);
        this.walkChildren(node);
        this.walkPostRequires(node);
        break;

      case OPTIONAL:
        this.walkPreOptional(node);
        this.walkChildren(node);
        this.walkPostOptional(node);
        break;

      case TITLE:
        this.walkPreTitle(node);
        this.walkChildren(node);
        this.walkPostTitle(node);
        break;

      case VERSION:
        this.walkPreVersion(node);
        this.walkChildren(node);
        this.walkPostVersion(node);
        break;

      case PRODUCT_REFS:
        this.walkPreProductRefs(node);
        this.walkChildren(node);
        this.walkPostProductRefs(node);
        break;

      case PRODUCT_REF:
        this.walkPreProductRef(node);
        this.walkChildren(node);
        this.walkPostProductRef(node);
        break;

      case VERSION_NUMBER:
        this.walkPreVersionNumber(node);
        this.walkChildren(node);
        this.walkPostVersionNumber(node);
        break;

      case VERSION_COMMENT:
        this.walkPreVersionComment(node);
        this.walkChildren(node);
        this.walkPostVersionComment(node);
        break;

      case FREE_LINES:
        this.walkPreFreeLines(node);
        this.walkChildren(node);
        this.walkPostFreeLines(node);
        break;

      case FREE_LINE:
        this.walkPreFreeLine(node);
        this.walkChildren(node);
        this.walkPostFreeLine(node);
        break;

      case NEWLINE:
        this.walkPreNewline(node);
        this.walkChildren(node);
        this.walkPostNewline(node);
        break;

      case COMMENT:
        this.walkPreComment(node);
        this.walkChildren(node);
        this.walkPostComment(node);
        break;

      case IDENTIFIER:
        this.walkPreIdentifier(node);
        this.walkChildren(node);
        this.walkPostIdentifier(node);
        break;

      case NUMBER:
        this.walkPreNumber(node);
        this.walkChildren(node);
        this.walkPostNumber(node);
        break;

      case REST_OF_LINE:
        this.walkPreRestOfLine(node);
        this.walkChildren(node);
        this.walkPostRestOfLine(node);
        break;

      default:
        this.walkPreDefault(node);
        this.walkChildren(node);
        this.walkPostDefault(node);
        break;
    }
  }

  protected void walkPreProductDefinition(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductDefinition(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProductIdentification(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductIdentification(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProductName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProductType(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductType(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDescription(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostDescription(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDoNotTranslate(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostDoNotTranslate(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRequires(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRequires(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreOptional(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostOptional(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTitle(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTitle(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVersion(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVersion(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProductRefs(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductRefs(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProductRef(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProductRef(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVersionNumber(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVersionNumber(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVersionComment(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVersionComment(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFreeLines(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFreeLines(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFreeLine(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFreeLine(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNewline(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNewline(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreComment(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostComment(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNumber(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNumber(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRestOfLine(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRestOfLine(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDefault(final AstNode node) {
    // pass
  }

  protected void walkPostDefault(final AstNode node) {
    // pass
  }

  protected void walkToken(final Token token) {
    // pass
  }

  protected void walkTrivia(final Trivia trivia) {
    // pass
  }
}
