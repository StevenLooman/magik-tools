package nl.ramsolutions.sw.magik.analysis;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.Token;
import com.sonar.sslr.api.Trivia;
import nl.ramsolutions.sw.magik.api.MagikGrammar;

/**
 * A {@link AstNode} tree walker with pre- and post-methods to iterate a parse tree. Note that this
 * is generated by the {@code generate_ast_walker.py} script, do not edit this file manually!
 */
public abstract class AstWalker {

  /** Walk children of node. */
  protected void walkChildren(final AstNode node) {
    for (final AstNode childNode : node.getChildren()) {
      this.walkAst(childNode);
    }
  }

  /** Walk trivia and tokens of node. */
  protected void walkTokens(final AstNode tokenNode) {
    // Assume there can be only one token.
    final Token token = tokenNode.getToken();
    token.getTrivia().forEach(this::walkTrivia);
    this.walkToken(token);
  }

  /**
   * Start walking the node. The pre- and post-methods are called upon tree traversal.
   *
   * @param node Node to start walking.
   */
  @SuppressWarnings({"java:S1479", "checkstyle:MethodLength"})
  public void walkAst(final AstNode node) {
    final AstNodeType nodeType = node.getType();
    if (!(nodeType instanceof MagikGrammar)) {
      this.walkTokens(node);
      return;
    }

    final MagikGrammar value = (MagikGrammar) nodeType;
    switch (value) {
      case NEWLINE:
        this.walkPreNewline(node);
        this.walkChildren(node);
        this.walkPostNewline(node);
        break;

      case COMMENT:
        this.walkPreComment(node);
        this.walkChildren(node);
        this.walkPostComment(node);
        break;

      case SPACING_NO_LB_2:
        this.walkPreSpacingNoLb2(node);
        this.walkChildren(node);
        this.walkPostSpacingNoLb2(node);
        break;

      case NEXT_NOT_COMMENT:
        this.walkPreNextNotComment(node);
        this.walkChildren(node);
        this.walkPostNextNotComment(node);
        break;

      case SYNTAX_ERROR:
        this.walkPreSyntaxError(node);
        this.walkChildren(node);
        this.walkPostSyntaxError(node);
        break;

      case MAGIK:
        this.walkPreMagik(node);
        this.walkChildren(node);
        this.walkPostMagik(node);
        break;

      case PACKAGE_SPECIFICATION:
        this.walkPrePackageSpecification(node);
        this.walkChildren(node);
        this.walkPostPackageSpecification(node);
        break;

      case PACKAGE_IDENTIFIER:
        this.walkPrePackageIdentifier(node);
        this.walkChildren(node);
        this.walkPostPackageIdentifier(node);
        break;

      case METHOD_DEFINITION:
        this.walkPreMethodDefinition(node);
        this.walkChildren(node);
        this.walkPostMethodDefinition(node);
        break;

      case EXEMPLAR_NAME:
        this.walkPreExemplarName(node);
        this.walkChildren(node);
        this.walkPostExemplarName(node);
        break;

      case METHOD_NAME:
        this.walkPreMethodName(node);
        this.walkChildren(node);
        this.walkPostMethodName(node);
        break;

      case CONDITION_NAME:
        this.walkPreConditionName(node);
        this.walkChildren(node);
        this.walkPostConditionName(node);
        break;

      case METHOD_DEFINITION_SYNTAX_ERROR:
        this.walkPreMethodDefinitionSyntaxError(node);
        this.walkChildren(node);
        this.walkPostMethodDefinitionSyntaxError(node);
        break;

      case TRANSMIT:
        this.walkPreTransmit(node);
        this.walkChildren(node);
        this.walkPostTransmit(node);
        break;

      case PRAGMA:
        this.walkPrePragma(node);
        this.walkChildren(node);
        this.walkPostPragma(node);
        break;

      case PRAGMA_PARAMS:
        this.walkPrePragmaParams(node);
        this.walkChildren(node);
        this.walkPostPragmaParams(node);
        break;

      case PRAGMA_PARAM:
        this.walkPrePragmaParam(node);
        this.walkChildren(node);
        this.walkPostPragmaParam(node);
        break;

      case PRAGMA_VALUE:
        this.walkPrePragmaValue(node);
        this.walkChildren(node);
        this.walkPostPragmaValue(node);
        break;

      case PARAMETERS:
        this.walkPreParameters(node);
        this.walkChildren(node);
        this.walkPostParameters(node);
        break;

      case PARAMETERS_PAREN:
        this.walkPreParametersParen(node);
        this.walkChildren(node);
        this.walkPostParametersParen(node);
        break;

      case PARAMETERS_PAREN_SYNTAX_ERROR:
        this.walkPreParametersParenSyntaxError(node);
        this.walkChildren(node);
        this.walkPostParametersParenSyntaxError(node);
        break;

      case PARAMETERS_SQUARE:
        this.walkPreParametersSquare(node);
        this.walkChildren(node);
        this.walkPostParametersSquare(node);
        break;

      case PARAMETERS_SQUARE_SYNTAX_ERROR:
        this.walkPreParametersSquareSyntaxError(node);
        this.walkChildren(node);
        this.walkPostParametersSquareSyntaxError(node);
        break;

      case PARAMETER:
        this.walkPreParameter(node);
        this.walkChildren(node);
        this.walkPostParameter(node);
        break;

      case ASSIGNMENT_PARAMETER:
        this.walkPreAssignmentParameter(node);
        this.walkChildren(node);
        this.walkPostAssignmentParameter(node);
        break;

      case ARGUMENTS:
        this.walkPreArguments(node);
        this.walkChildren(node);
        this.walkPostArguments(node);
        break;

      case ARGUMENTS_PAREN:
        this.walkPreArgumentsParen(node);
        this.walkChildren(node);
        this.walkPostArgumentsParen(node);
        break;

      case ARGUMENTS_PAREN_SYNTAX_ERROR:
        this.walkPreArgumentsParenSyntaxError(node);
        this.walkChildren(node);
        this.walkPostArgumentsParenSyntaxError(node);
        break;

      case ARGUMENTS_SQUARE:
        this.walkPreArgumentsSquare(node);
        this.walkChildren(node);
        this.walkPostArgumentsSquare(node);
        break;

      case ARGUMENTS_SQUARE_SYNTAX_ERROR:
        this.walkPreArgumentsSquareSyntaxError(node);
        this.walkChildren(node);
        this.walkPostArgumentsSquareSyntaxError(node);
        break;

      case ARGUMENT:
        this.walkPreArgument(node);
        this.walkChildren(node);
        this.walkPostArgument(node);
        break;

      case ASSIGNMENT_ARGUMENT:
        this.walkPreAssignmentArgument(node);
        this.walkChildren(node);
        this.walkPostAssignmentArgument(node);
        break;

      case BODY:
        this.walkPreBody(node);
        this.walkChildren(node);
        this.walkPostBody(node);
        break;

      case OPERATOR:
        this.walkPreOperator(node);
        this.walkChildren(node);
        this.walkPostOperator(node);
        break;

      case TUPLE:
        this.walkPreTuple(node);
        this.walkChildren(node);
        this.walkPostTuple(node);
        break;

      case IDENTIFIERS:
        this.walkPreIdentifiers(node);
        this.walkChildren(node);
        this.walkPostIdentifiers(node);
        break;

      case IDENTIFIERS_WITH_GATHER:
        this.walkPreIdentifiersWithGather(node);
        this.walkChildren(node);
        this.walkPostIdentifiersWithGather(node);
        break;

      case METHOD_INVOCATION:
        this.walkPreMethodInvocation(node);
        this.walkChildren(node);
        this.walkPostMethodInvocation(node);
        break;

      case PROCEDURE_INVOCATION:
        this.walkPreProcedureInvocation(node);
        this.walkChildren(node);
        this.walkPostProcedureInvocation(node);
        break;

      case METHOD_MODIFIERS:
        this.walkPreMethodModifiers(node);
        this.walkChildren(node);
        this.walkPostMethodModifiers(node);
        break;

      case PARAMETER_MODIFIER:
        this.walkPreParameterModifier(node);
        this.walkChildren(node);
        this.walkPostParameterModifier(node);
        break;

      case VARIABLE_DEFINITION_MODIFIER:
        this.walkPreVariableDefinitionModifier(node);
        this.walkChildren(node);
        this.walkPostVariableDefinitionModifier(node);
        break;

      case VARIABLE_DEFINITION_MULTI:
        this.walkPreVariableDefinitionMulti(node);
        this.walkChildren(node);
        this.walkPostVariableDefinitionMulti(node);
        break;

      case VARIABLE_DEFINITION:
        this.walkPreVariableDefinition(node);
        this.walkChildren(node);
        this.walkPostVariableDefinition(node);
        break;

      case MULTIPLE_ASSIGNMENT_ASSIGNABLES:
        this.walkPreMultipleAssignmentAssignables(node);
        this.walkChildren(node);
        this.walkPostMultipleAssignmentAssignables(node);
        break;

      case TRY_VARIABLE:
        this.walkPreTryVariable(node);
        this.walkChildren(node);
        this.walkPostTryVariable(node);
        break;

      case FOR_VARIABLES:
        this.walkPreForVariables(node);
        this.walkChildren(node);
        this.walkPostForVariables(node);
        break;

      case CONDITIONAL_EXPRESSION:
        this.walkPreConditionalExpression(node);
        this.walkChildren(node);
        this.walkPostConditionalExpression(node);
        break;

      case ITERABLE_EXPRESSION:
        this.walkPreIterableExpression(node);
        this.walkChildren(node);
        this.walkPostIterableExpression(node);
        break;

      case STATEMENT:
        this.walkPreStatement(node);
        this.walkChildren(node);
        this.walkPostStatement(node);
        break;

      case STATEMENT_SYNTAX_ERROR:
        this.walkPreStatementSyntaxError(node);
        this.walkChildren(node);
        this.walkPostStatementSyntaxError(node);
        break;

      case STATEMENT_SEPARATOR:
        this.walkPreStatementSeparator(node);
        this.walkChildren(node);
        this.walkPostStatementSeparator(node);
        break;

      case VARIABLE_DEFINITION_STATEMENT:
        this.walkPreVariableDefinitionStatement(node);
        this.walkChildren(node);
        this.walkPostVariableDefinitionStatement(node);
        break;

      case MULTIPLE_ASSIGNMENT_STATEMENT:
        this.walkPreMultipleAssignmentStatement(node);
        this.walkChildren(node);
        this.walkPostMultipleAssignmentStatement(node);
        break;

      case RETURN_STATEMENT:
        this.walkPreReturnStatement(node);
        this.walkChildren(node);
        this.walkPostReturnStatement(node);
        break;

      case EMIT_STATEMENT:
        this.walkPreEmitStatement(node);
        this.walkChildren(node);
        this.walkPostEmitStatement(node);
        break;

      case EXPRESSION_STATEMENT:
        this.walkPreExpressionStatement(node);
        this.walkChildren(node);
        this.walkPostExpressionStatement(node);
        break;

      case PRIMITIVE_STATEMENT:
        this.walkPrePrimitiveStatement(node);
        this.walkChildren(node);
        this.walkPostPrimitiveStatement(node);
        break;

      case LEAVE_STATEMENT:
        this.walkPreLeaveStatement(node);
        this.walkChildren(node);
        this.walkPostLeaveStatement(node);
        break;

      case CONTINUE_STATEMENT:
        this.walkPreContinueStatement(node);
        this.walkChildren(node);
        this.walkPostContinueStatement(node);
        break;

      case THROW_STATEMENT:
        this.walkPreThrowStatement(node);
        this.walkChildren(node);
        this.walkPostThrowStatement(node);
        break;

      case HANDLING:
        this.walkPreHandling(node);
        this.walkChildren(node);
        this.walkPostHandling(node);
        break;

      case BLOCK:
        this.walkPreBlock(node);
        this.walkChildren(node);
        this.walkPostBlock(node);
        break;

      case BLOCK_SYNTAX_ERROR:
        this.walkPreBlockSyntaxError(node);
        this.walkChildren(node);
        this.walkPostBlockSyntaxError(node);
        break;

      case PROTECT:
        this.walkPreProtect(node);
        this.walkChildren(node);
        this.walkPostProtect(node);
        break;

      case PROTECT_SYNTAX_ERROR:
        this.walkPreProtectSyntaxError(node);
        this.walkChildren(node);
        this.walkPostProtectSyntaxError(node);
        break;

      case PROTECTION:
        this.walkPreProtection(node);
        this.walkChildren(node);
        this.walkPostProtection(node);
        break;

      case TRY:
        this.walkPreTry(node);
        this.walkChildren(node);
        this.walkPostTry(node);
        break;

      case TRY_SYNTAX_ERROR:
        this.walkPreTrySyntaxError(node);
        this.walkChildren(node);
        this.walkPostTrySyntaxError(node);
        break;

      case WHEN:
        this.walkPreWhen(node);
        this.walkChildren(node);
        this.walkPostWhen(node);
        break;

      case CATCH:
        this.walkPreCatch(node);
        this.walkChildren(node);
        this.walkPostCatch(node);
        break;

      case CATCH_SYNTAX_ERROR:
        this.walkPreCatchSyntaxError(node);
        this.walkChildren(node);
        this.walkPostCatchSyntaxError(node);
        break;

      case LOCK:
        this.walkPreLock(node);
        this.walkChildren(node);
        this.walkPostLock(node);
        break;

      case LOCK_SYNTAX_ERROR:
        this.walkPreLockSyntaxError(node);
        this.walkChildren(node);
        this.walkPostLockSyntaxError(node);
        break;

      case IF:
        this.walkPreIf(node);
        this.walkChildren(node);
        this.walkPostIf(node);
        break;

      case IF_SYNTAX_ERROR:
        this.walkPreIfSyntaxError(node);
        this.walkChildren(node);
        this.walkPostIfSyntaxError(node);
        break;

      case ELIF:
        this.walkPreElif(node);
        this.walkChildren(node);
        this.walkPostElif(node);
        break;

      case ELSE:
        this.walkPreElse(node);
        this.walkChildren(node);
        this.walkPostElse(node);
        break;

      case FOR:
        this.walkPreFor(node);
        this.walkChildren(node);
        this.walkPostFor(node);
        break;

      case WHILE:
        this.walkPreWhile(node);
        this.walkChildren(node);
        this.walkPostWhile(node);
        break;

      case OVER:
        this.walkPreOver(node);
        this.walkChildren(node);
        this.walkPostOver(node);
        break;

      case LOOP:
        this.walkPreLoop(node);
        this.walkChildren(node);
        this.walkPostLoop(node);
        break;

      case LOOP_SYNTAX_ERROR:
        this.walkPreLoopSyntaxError(node);
        this.walkChildren(node);
        this.walkPostLoopSyntaxError(node);
        break;

      case FINALLY:
        this.walkPreFinally(node);
        this.walkChildren(node);
        this.walkPostFinally(node);
        break;

      case EXPRESSION:
        this.walkPreExpression(node);
        this.walkChildren(node);
        this.walkPostExpression(node);
        break;

      case ASSIGNMENT_EXPRESSION:
        this.walkPreAssignmentExpression(node);
        this.walkChildren(node);
        this.walkPostAssignmentExpression(node);
        break;

      case AUGMENTED_ASSIGNMENT_EXPRESSION:
        this.walkPreAugmentedAssignmentExpression(node);
        this.walkChildren(node);
        this.walkPostAugmentedAssignmentExpression(node);
        break;

      case OR_EXPRESSION:
        this.walkPreOrExpression(node);
        this.walkChildren(node);
        this.walkPostOrExpression(node);
        break;

      case XOR_EXPRESSION:
        this.walkPreXorExpression(node);
        this.walkChildren(node);
        this.walkPostXorExpression(node);
        break;

      case AND_EXPRESSION:
        this.walkPreAndExpression(node);
        this.walkChildren(node);
        this.walkPostAndExpression(node);
        break;

      case EQUALITY_EXPRESSION:
        this.walkPreEqualityExpression(node);
        this.walkChildren(node);
        this.walkPostEqualityExpression(node);
        break;

      case RELATIONAL_EXPRESSION:
        this.walkPreRelationalExpression(node);
        this.walkChildren(node);
        this.walkPostRelationalExpression(node);
        break;

      case ADDITIVE_EXPRESSION:
        this.walkPreAdditiveExpression(node);
        this.walkChildren(node);
        this.walkPostAdditiveExpression(node);
        break;

      case MULTIPLICATIVE_EXPRESSION:
        this.walkPreMultiplicativeExpression(node);
        this.walkChildren(node);
        this.walkPostMultiplicativeExpression(node);
        break;

      case EXPONENTIAL_EXPRESSION:
        this.walkPreExponentialExpression(node);
        this.walkChildren(node);
        this.walkPostExponentialExpression(node);
        break;

      case UNARY_EXPRESSION:
        this.walkPreUnaryExpression(node);
        this.walkChildren(node);
        this.walkPostUnaryExpression(node);
        break;

      case POSTFIX_EXPRESSION:
        this.walkPrePostfixExpression(node);
        this.walkChildren(node);
        this.walkPostPostfixExpression(node);
        break;

      case ATOM:
        this.walkPreAtom(node);
        this.walkChildren(node);
        this.walkPostAtom(node);
        break;

      case STRING:
        this.walkPreString(node);
        this.walkChildren(node);
        this.walkPostString(node);
        break;

      case NUMBER:
        this.walkPreNumber(node);
        this.walkChildren(node);
        this.walkPostNumber(node);
        break;

      case CHARACTER:
        this.walkPreCharacter(node);
        this.walkChildren(node);
        this.walkPostCharacter(node);
        break;

      case SYMBOL:
        this.walkPreSymbol(node);
        this.walkChildren(node);
        this.walkPostSymbol(node);
        break;

      case REGEXP:
        this.walkPreRegexp(node);
        this.walkChildren(node);
        this.walkPostRegexp(node);
        break;

      case IDENTIFIER:
        this.walkPreIdentifier(node);
        this.walkChildren(node);
        this.walkPostIdentifier(node);
        break;

      case LABEL:
        this.walkPreLabel(node);
        this.walkChildren(node);
        this.walkPostLabel(node);
        break;

      case SLOT:
        this.walkPreSlot(node);
        this.walkChildren(node);
        this.walkPostSlot(node);
        break;

      case GLOBAL_REF:
        this.walkPreGlobalRef(node);
        this.walkChildren(node);
        this.walkPostGlobalRef(node);
        break;

      case SIMPLE_VECTOR:
        this.walkPreSimpleVector(node);
        this.walkChildren(node);
        this.walkPostSimpleVector(node);
        break;

      case SIMPLE_VECTOR_SYNTAX_ERROR:
        this.walkPreSimpleVectorSyntaxError(node);
        this.walkChildren(node);
        this.walkPostSimpleVectorSyntaxError(node);
        break;

      case GATHER_EXPRESSION:
        this.walkPreGatherExpression(node);
        this.walkChildren(node);
        this.walkPostGatherExpression(node);
        break;

      case CLASS:
        this.walkPreClass(node);
        this.walkChildren(node);
        this.walkPostClass(node);
        break;

      case LOOPBODY:
        this.walkPreLoopbody(node);
        this.walkChildren(node);
        this.walkPostLoopbody(node);
        break;

      case PROCEDURE_DEFINITION:
        this.walkPreProcedureDefinition(node);
        this.walkChildren(node);
        this.walkPostProcedureDefinition(node);
        break;

      case PROCEDURE_NAME:
        this.walkPreProcedureName(node);
        this.walkChildren(node);
        this.walkPostProcedureName(node);
        break;

      case PROCEDURE_DEFINITION_SYNTAX_ERROR:
        this.walkPreProcedureDefinitionSyntaxError(node);
        this.walkChildren(node);
        this.walkPostProcedureDefinitionSyntaxError(node);
        break;

      case SELF:
        this.walkPreSelf(node);
        this.walkChildren(node);
        this.walkPostSelf(node);
        break;

      case CLONE:
        this.walkPreClone(node);
        this.walkChildren(node);
        this.walkPostClone(node);
        break;

      case UNSET:
        this.walkPreUnset(node);
        this.walkChildren(node);
        this.walkPostUnset(node);
        break;

      case TRUE:
        this.walkPreTrue(node);
        this.walkChildren(node);
        this.walkPostTrue(node);
        break;

      case FALSE:
        this.walkPreFalse(node);
        this.walkChildren(node);
        this.walkPostFalse(node);
        break;

      case MAYBE:
        this.walkPreMaybe(node);
        this.walkChildren(node);
        this.walkPostMaybe(node);
        break;

      case THISTHREAD:
        this.walkPreThisthread(node);
        this.walkChildren(node);
        this.walkPostThisthread(node);
        break;

      case SUPER:
        this.walkPreSuper(node);
        this.walkChildren(node);
        this.walkPostSuper(node);
        break;

      default:
        this.walkPreDefault(node);
        this.walkChildren(node);
        this.walkPostDefault(node);
        break;
    }
  }

  protected void walkPreNewline(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNewline(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreComment(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostComment(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSpacingNoLb2(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSpacingNoLb2(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNextNotComment(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNextNotComment(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMagik(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMagik(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePackageSpecification(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPackageSpecification(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePackageIdentifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPackageIdentifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMethodDefinition(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMethodDefinition(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreExemplarName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostExemplarName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMethodName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMethodName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreConditionName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostConditionName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMethodDefinitionSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMethodDefinitionSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTransmit(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTransmit(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePragma(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPragma(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePragmaParams(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPragmaParams(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePragmaParam(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPragmaParam(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePragmaValue(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPragmaValue(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParameters(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParameters(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParametersParen(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParametersParen(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParametersParenSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParametersParenSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParametersSquare(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParametersSquare(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParametersSquareSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParametersSquareSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParameter(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParameter(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAssignmentParameter(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAssignmentParameter(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArguments(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArguments(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArgumentsParen(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArgumentsParen(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArgumentsParenSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArgumentsParenSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArgumentsSquare(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArgumentsSquare(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArgumentsSquareSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArgumentsSquareSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreArgument(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostArgument(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAssignmentArgument(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAssignmentArgument(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreBody(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostBody(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreOperator(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostOperator(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTuple(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTuple(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifiers(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifiers(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifiersWithGather(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifiersWithGather(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMethodInvocation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMethodInvocation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProcedureInvocation(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProcedureInvocation(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMethodModifiers(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMethodModifiers(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreParameterModifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostParameterModifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionModifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionModifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionMulti(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionMulti(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVariableDefinition(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVariableDefinition(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMultipleAssignmentAssignables(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMultipleAssignmentAssignables(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTryVariable(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTryVariable(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreForVariables(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostForVariables(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreConditionalExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostConditionalExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIterableExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIterableExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreStatementSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostStatementSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreStatementSeparator(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostStatementSeparator(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMultipleAssignmentStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMultipleAssignmentStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreReturnStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostReturnStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreEmitStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostEmitStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreExpressionStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostExpressionStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePrimitiveStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPrimitiveStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLeaveStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLeaveStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreContinueStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostContinueStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreThrowStatement(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostThrowStatement(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreHandling(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostHandling(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreBlock(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostBlock(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreBlockSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostBlockSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProtect(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProtect(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProtectSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProtectSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProtection(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProtection(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTry(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTry(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTrySyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTrySyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreWhen(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostWhen(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreCatch(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostCatch(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreCatchSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostCatchSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLock(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLock(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLockSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLockSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIf(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIf(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIfSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIfSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreElif(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostElif(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreElse(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostElse(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFor(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFor(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreWhile(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostWhile(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreOver(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostOver(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLoop(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLoop(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLoopSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLoopSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFinally(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFinally(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAssignmentExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAssignmentExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAugmentedAssignmentExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAugmentedAssignmentExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreOrExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostOrExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreXorExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostXorExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAndExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAndExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreEqualityExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostEqualityExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRelationalExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRelationalExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAdditiveExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAdditiveExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMultiplicativeExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMultiplicativeExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreExponentialExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostExponentialExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreUnaryExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostUnaryExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPrePostfixExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostPostfixExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreAtom(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostAtom(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreString(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostString(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreNumber(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostNumber(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreCharacter(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostCharacter(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSymbol(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSymbol(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreRegexp(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostRegexp(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreIdentifier(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostIdentifier(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLabel(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLabel(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSlot(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSlot(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreGlobalRef(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostGlobalRef(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSimpleVector(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSimpleVector(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSimpleVectorSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSimpleVectorSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreGatherExpression(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostGatherExpression(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreClass(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostClass(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreLoopbody(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostLoopbody(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProcedureDefinition(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProcedureDefinition(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProcedureName(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProcedureName(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreProcedureDefinitionSyntaxError(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostProcedureDefinitionSyntaxError(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSelf(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSelf(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreClone(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostClone(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreUnset(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostUnset(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreTrue(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostTrue(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreFalse(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostFalse(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreMaybe(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostMaybe(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreThisthread(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostThisthread(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreSuper(final AstNode node) {
    this.walkPreDefault(node);
  }

  protected void walkPostSuper(final AstNode node) {
    this.walkPostDefault(node);
  }

  protected void walkPreDefault(final AstNode node) {
    // pass
  }

  protected void walkPostDefault(final AstNode node) {
    // pass
  }

  protected void walkToken(final Token token) {
    // pass
  }

  protected void walkTrivia(final Trivia trivia) {
    // pass
  }
}
